{"version":3,"file":"js/811.0c33e3a9.js","mappings":"qMACOA,GAAG,O,WAAM,Y,WAKX,S,0CALHC,EAAAA,EAAAA,IAkBM,MAlBN,EAkBM,aAhBJC,EAAAA,EAAAA,GAGC,S,qCAFUC,EAAAA,MAAKC,GACdC,KAAK,QAFP,iBACWF,EAAAA,SAeP,YAZAD,EAAAA,EAAAA,GAIH,S,qCAHUC,EAAAA,QAAOC,GAChBC,KAAK,OACJC,QAAK,oBAAEC,EAAAA,aAAAA,EAAAA,eAAAA,KAHN,iBACOJ,EAAAA,aAWP,aAPJF,EAAAA,EAAAA,IAMMO,EAAAA,GAAA,MAAAC,EAAAA,EAAAA,IALkBN,EAAAA,UAAQ,CAAtBO,EAAMC,M,WADhBV,EAAAA,EAAAA,IAMM,OAJHW,IAAKD,GAAG,EAETT,EAAAA,EAAAA,GAAgC,UAA5B,WAAOW,EAAAA,EAAAA,IAAGH,EAAKI,OAAK,IACxBZ,EAAAA,EAAAA,GAA+B,UAA3B,QAAIW,EAAAA,EAAAA,IAAGH,EAAKK,SAAO,QALzB,Q,0CAeJ,GACEC,KAAM,MACNC,OACE,MAAO,CACLH,MAAO,GACPC,QAAS,GACTG,SAAU,KAGdC,UAEEC,KAAKC,WAEPC,QAAS,CACPC,YAAaC,GACXC,QAAQC,IAAI,UAAYF,EAAEG,SACT,KAAdH,EAAEG,SAAiC,KAAfP,KAAKN,OAAiC,KAAjBM,KAAKL,UAE/CK,KAAKQ,OACLR,KAAKS,QACLT,KAAKL,QAAU,KAGnBa,OAIE,GAHAH,QAAQC,IAAI,gBAAkBN,KAAKL,SACnCU,QAAQC,IAAIN,KAAKU,aACjBL,QAAQC,IAAIN,KAAKU,YAAYC,WACzBX,KAAKU,aAAeV,KAAKU,YAAYC,UAAW,CAClD,MAAMC,EAAM,CACVlB,MAAOM,KAAKN,MACZC,QAASK,KAAKL,SAEhBK,KAAKU,YAAYF,KAAK,WAAYK,KAAKC,UAAUF,GAAM,MAG3DH,QAEE,GADAJ,QAAQC,IAAI,uBAAyBN,KAAKL,SACtCK,KAAKU,aAAeV,KAAKU,YAAYC,UAAW,CAClD,MAAMC,EAAM,CACVlB,MAAOM,KAAKN,MACZC,QAASK,KAAKL,SAEhBK,KAAKU,YAAYF,KAAK,YAAaK,KAAKC,UAAUF,GAAM,MAG5DX,UACE,MAAMc,EAAY,UAClB,IAAIC,EAAS,IAAIC,IAAJ,CAAWF,GACxBf,KAAKU,YAAcQ,IAAAA,KAAWF,GAC9BX,QAAQC,IAAK,wBAAuBS,KACpCf,KAAKU,YAAYT,QACf,IACAkB,IAEEnB,KAAKW,WAAY,EACjBN,QAAQC,IAAI,WAAYa,GAGxBnB,KAAKU,YAAYU,UAAU,SAASC,IAClChB,QAAQC,IAAI,mBAAoBe,EAAIC,MAGpCtB,KAAKF,SAASyB,KAAKV,KAAKW,MAAMH,EAAIC,UAEpCtB,KAAKU,YAAYU,UAAU,UAAUC,IACnChB,QAAQC,IAAI,eAAgBe,EAAIC,YAGpCG,IAEEpB,QAAQC,IAAI,WAAYmB,GACxBzB,KAAKW,WAAY,Q,QC7F3B,MAAMe,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE","sources":["webpack://realvue/./src/views/main/webSocketTest.vue","webpack://realvue/./src/views/main/webSocketTest.vue?dbdf"],"sourcesContent":["<template>\n  <div id=\"app\">\n    title: \n    <input\n      v-model=\"title\"\n      type=\"text\"\n    >\n    내용: <input\n      v-model=\"content\"\n      type=\"text\"\n      @keyup=\"sendcontent\"\n    >\n    <div\n      v-for=\"(item, idx) in recvList\"\n      :key=\"idx\"\n    >\n      <h3>title: {{ item.title }}</h3>\n      <h3>내용: {{ item.content }}</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Stomp from 'webstomp-client'\nimport SockJS from 'sockjs-client'\n\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      title: \"\",\n      content: \"\",\n      recvList: []\n    }\n  },\n  created() {\n    // App.vue가 생성되면 소켓 연결을 시도합니다.\n    this.connect()\n  },\n  methods: {\n    sendcontent (e) {\n      console.log(\"keyup: \" + e.keyCode);\n      if(e.keyCode === 13 && this.title !== '' && this.content !== ''){\n        \n        this.send()\n        this.send2()\n        this.content = ''\n      }\n    },    \n    send() {\n      console.log(\"Send content:\" + this.content);\n      console.log(this.stompClient);\n      console.log(this.stompClient.connected);\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = { \n          title: this.title,\n          content: this.content \n        };\n        this.stompClient.send(\"/receive\", JSON.stringify(msg), {});\n      }\n    },\n    send2() {\n      console.log(\"Send content2222222:\" + this.content);\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = { \n          title: this.title,\n          content: this.content \n        };\n        this.stompClient.send(\"/receive2\", JSON.stringify(msg), {});\n      }\n    },       \n    connect() {\n      const serverURL = \"/socket\"\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      console.log(`소켓 연결을 시도합니다. 서버 주소: ${serverURL}`)\n      this.stompClient.connect(\n        {},\n        frame => {\n          // 소켓 연결 성공\n          this.connected = true;\n          console.log('소켓 연결 성공', frame);\n          // 서버의 메시지 전송 endpoint를 구독합니다.\n          // 이런형태를 pub sub 구조라고 합니다.\n          this.stompClient.subscribe(\"/send\", res => {\n            console.log('구독으로 받은 메시지 입니다.', res.body);\n\n            // 받은 데이터를 json으로 파싱하고 리스트에 넣어줍니다.\n            this.recvList.push(JSON.parse(res.body))\n          });\n          this.stompClient.subscribe(\"/send2\", res => {\n            console.log('222222222222', res.body);\n          });\n        },\n        error => {\n          // 소켓 연결 실패\n          console.log('소켓 연결 실패', error);\n          this.connected = false;\n        }\n      );        \n    }\n  }\n}\n</script>","import { render } from \"./webSocketTest.vue?vue&type=template&id=6de7eb2a\"\nimport script from \"./webSocketTest.vue?vue&type=script&lang=js\"\nexport * from \"./webSocketTest.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/webapp_farm_auction/rda_farm/FrontVue3/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_createElementVNode","$data","$event","type","onKeyup","$options","_Fragment","_renderList","item","idx","key","_toDisplayString","title","content","name","data","recvList","created","this","connect","methods","sendcontent","e","console","log","keyCode","send","send2","stompClient","connected","msg","JSON","stringify","serverURL","socket","SockJS","Stomp","frame","subscribe","res","body","push","parse","error","__exports__","render"],"sourceRoot":""}